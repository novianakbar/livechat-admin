'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import {
    ArrowLeft,
    Calendar,
    Clock,
    User,
    Mail,
    MessageSquare,
    Settings,
    AlertTriangle,
    Edit
} from 'lucide-react';
import { useTicketStore } from '@/lib/stores/ticket-store';
import { StatusBadge, PriorityBadge } from '@/components/tickets/TicketBadge';
import { formatDistanceToNow } from 'date-fns';
import type { TicketDetail } from '@/lib/types/tickets';

export default function TicketDetailPage() {
    const params = useParams();
    const router = useRouter();
    const ticketId = params.id as string;

    const {
        currentTicket,
        loading,
        error,
        fetchTicket,
        updateTicket,
        escalateTicket,
        addComment,
    } = useTicketStore();

    const [showCommentForm, setShowCommentForm] = useState(false);
    const [newComment, setNewComment] = useState('');
    const [isSubmittingComment, setIsSubmittingComment] = useState(false);

    useEffect(() => {
        if (ticketId) {
            fetchTicket(ticketId);
        }
    }, [ticketId, fetchTicket]);

    const handleBack = () => {
        router.push('/tickets');
    };

    const handleStatusChange = async (status: string) => {
        if (!currentTicket) return;

        try {
            await updateTicket({
                id: currentTicket.id,
                status,
            });
        } catch (error) {
            console.error('Failed to update ticket status:', error);
        }
    };

    const handlePriorityChange = async (priority: string) => {
        if (!currentTicket) return;

        try {
            await updateTicket({
                id: currentTicket.id,
                priority,
            });
        } catch (error) {
            console.error('Failed to update ticket priority:', error);
        }
    };

    const handleEscalate = async () => {
        if (!currentTicket) return;

        try {
            await escalateTicket(currentTicket.id, 'Escalated from admin panel');
        } catch (error) {
            console.error('Failed to escalate ticket:', error);
        }
    };

    const handleAddComment = async () => {
        if (!currentTicket || !newComment.trim()) return;

        setIsSubmittingComment(true);
        try {
            await addComment({
                ticket_id: currentTicket.id,
                content: newComment,
                is_public: true,
                created_by: 'current-user', // TODO: Get from auth context
            });
            setNewComment('');
            setShowCommentForm(false);
        } catch (error) {
            console.error('Failed to add comment:', error);
        } finally {
            setIsSubmittingComment(false);
        }
    };

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-red-600"></div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex flex-col items-center justify-center min-h-screen">
                <div className="text-red-600 mb-4">{error}</div>
                <button
                    onClick={() => fetchTicket(ticketId)}
                    className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors font-medium"
                >
                    Retry
                </button>
            </div>
        );
    }

    if (!currentTicket) {
        return (
            <div className="flex flex-col items-center justify-center min-h-screen">
                <div className="text-gray-600 mb-4">Ticket not found</div>
                <button
                    onClick={handleBack}
                    className="bg-white text-gray-700 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors font-medium"
                >
                    Back to Tickets
                </button>
            </div>
        );
    }

    // Cast to TicketDetail if we need access to comments, attachments, etc.
    const ticketDetail = currentTicket as TicketDetail;

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                    <button
                        onClick={handleBack}
                        className="bg-white text-gray-700 px-3 py-1 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors text-sm inline-flex items-center"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Back
                    </button>
                    <div>
                        <h1 className="text-2xl font-bold text-gray-900">#{currentTicket.ticket_code}</h1>
                        <p className="text-gray-600">{currentTicket.subject}</p>
                    </div>
                </div>

                <div className="flex items-center space-x-2">
                    <button
                        onClick={handleEscalate}
                        className="bg-white text-orange-700 px-3 py-1 rounded-lg border border-orange-300 hover:bg-orange-50 transition-colors text-sm inline-flex items-center"
                    >
                        <AlertTriangle className="h-4 w-4 mr-2" />
                        Escalate
                    </button>
                    <button
                        onClick={() => router.push(`/tickets/${ticketId}/edit`)}
                        className="bg-white text-gray-700 px-3 py-1 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors text-sm inline-flex items-center"
                    >
                        <Edit className="h-4 w-4 mr-2" />
                        Edit
                    </button>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Main Content */}
                <div className="lg:col-span-2 space-y-6">
                    {/* Ticket Info */}
                    <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                        <div className="flex items-start justify-between mb-4">
                            <div className="flex items-center space-x-3">
                                <StatusBadge status={currentTicket.status} />
                                <PriorityBadge priority={currentTicket.priority} />
                            </div>
                            <div className="flex items-center space-x-2">
                                <Calendar className="h-4 w-4 text-gray-400" />
                                <span className="text-sm text-gray-600">
                                    Created {formatDistanceToNow(new Date(currentTicket.created_at))} ago
                                </span>
                            </div>
                        </div>

                        <h2 className="text-lg font-semibold mb-3">Description</h2>
                        <p className="text-gray-700 whitespace-pre-wrap">
                            {currentTicket.description}
                        </p>
                    </div>

                    {/* Comments */}
                    <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                        <div className="flex items-center justify-between mb-4">
                            <h2 className="text-lg font-semibold flex items-center">
                                <MessageSquare className="h-5 w-5 mr-2" />
                                Comments ({ticketDetail.comments?.length || 0})
                            </h2>
                            <button
                                onClick={() => setShowCommentForm(!showCommentForm)}
                                className="bg-red-600 text-white px-3 py-1 rounded-lg hover:bg-red-700 transition-colors text-sm"
                            >
                                Add Comment
                            </button>
                        </div>

                        {/* Comment Form */}
                        {showCommentForm && (
                            <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                                <textarea
                                    value={newComment}
                                    onChange={(e) => setNewComment(e.target.value)}
                                    placeholder="Write your comment..."
                                    className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
                                    rows={4}
                                />
                                <div className="flex justify-end space-x-2 mt-3">
                                    <button
                                        onClick={() => setShowCommentForm(false)}
                                        className="bg-white text-gray-700 px-3 py-1 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors text-sm"
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        onClick={handleAddComment}
                                        disabled={!newComment.trim() || isSubmittingComment}
                                        className="bg-red-600 text-white px-3 py-1 rounded-lg hover:bg-red-700 transition-colors text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                                    >
                                        {isSubmittingComment ? 'Adding...' : 'Add Comment'}
                                    </button>
                                </div>
                            </div>
                        )}

                        {/* Comments List */}
                        <div className="space-y-4">
                            {ticketDetail.comments?.length ? (
                                ticketDetail.comments.map((comment) => (
                                    <div key={comment.id} className="flex space-x-3">
                                        <div className="flex-shrink-0">
                                            <div className="h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center">
                                                <User className="h-4 w-4 text-gray-600" />
                                            </div>
                                        </div>
                                        <div className="flex-1">
                                            <div className="flex items-center space-x-2">
                                                <span className="font-medium text-sm">
                                                    {comment.user?.name || 'System'}
                                                </span>
                                                <span className="text-xs text-gray-500">
                                                    {formatDistanceToNow(new Date(comment.created_at))} ago
                                                </span>
                                                {comment.is_internal && (
                                                    <span className="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                                                        Internal
                                                    </span>
                                                )}
                                            </div>
                                            <p className="text-sm text-gray-700 mt-1 whitespace-pre-wrap">
                                                {comment.content}
                                            </p>
                                        </div>
                                    </div>
                                ))
                            ) : (
                                <p className="text-gray-500 text-center py-4">
                                    No comments yet
                                </p>
                            )}
                        </div>
                    </div>
                </div>

                {/* Sidebar */}
                <div className="space-y-6">
                    {/* Customer Info */}
                    <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                        <h3 className="font-semibold mb-4 flex items-center">
                            <User className="h-4 w-4 mr-2" />
                            Customer
                        </h3>
                        <div className="space-y-3">
                            <div>
                                <span className="text-sm font-medium text-gray-600">Name</span>
                                <p className="text-sm">{currentTicket.customer_name}</p>
                            </div>
                            <div>
                                <span className="text-sm font-medium text-gray-600">Email</span>
                                <p className="text-sm flex items-center">
                                    <Mail className="h-3 w-3 mr-1" />
                                    {currentTicket.customer_email}
                                </p>
                            </div>
                            {currentTicket.customer_phone && (
                                <div>
                                    <span className="text-sm font-medium text-gray-600">Phone</span>
                                    <p className="text-sm">{currentTicket.customer_phone}</p>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Ticket Details */}
                    <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                        <h3 className="font-semibold mb-4 flex items-center">
                            <Settings className="h-4 w-4 mr-2" />
                            Details
                        </h3>
                        <div className="space-y-4">
                            <div>
                                <span className="text-sm font-medium text-gray-600">Status</span>
                                <div className="mt-1">
                                    <select
                                        value={currentTicket.status}
                                        onChange={(e) => handleStatusChange(e.target.value)}
                                        className="w-full text-sm border border-gray-300 rounded-lg px-2 py-1 focus:ring-2 focus:ring-red-500 focus:border-red-500"
                                    >
                                        <option value="open">Open</option>
                                        <option value="in_progress">In Progress</option>
                                        <option value="resolved">Resolved</option>
                                        <option value="closed">Closed</option>
                                        <option value="escalated">Escalated</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-gray-600">Priority</span>
                                <div className="mt-1">
                                    <select
                                        value={currentTicket.priority}
                                        onChange={(e) => handlePriorityChange(e.target.value)}
                                        className="w-full text-sm border border-gray-300 rounded-lg px-2 py-1 focus:ring-2 focus:ring-red-500 focus:border-red-500"
                                    >
                                        <option value="low">Low</option>
                                        <option value="medium">Medium</option>
                                        <option value="high">High</option>
                                        <option value="urgent">Urgent</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-gray-600">Category</span>
                                <p className="text-sm mt-1">
                                    {currentTicket.category?.name || 'No category'}
                                </p>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-gray-600">Assigned to</span>
                                <p className="text-sm mt-1">
                                    {currentTicket.assigned_to?.name || 'Unassigned'}
                                </p>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-gray-600">Department</span>
                                <p className="text-sm mt-1">
                                    {currentTicket.department?.name || 'No department'}
                                </p>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-gray-600">Created</span>
                                <p className="text-sm mt-1 flex items-center">
                                    <Clock className="h-3 w-3 mr-1" />
                                    {new Date(currentTicket.created_at).toLocaleString()}
                                </p>
                            </div>

                            <div>
                                <span className="text-sm font-medium text-gray-600">Last Updated</span>
                                <p className="text-sm mt-1 flex items-center">
                                    <Clock className="h-3 w-3 mr-1" />
                                    {new Date(currentTicket.updated_at).toLocaleString()}
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* SLA Info */}
                    {ticketDetail.sla && (
                        <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                            <h3 className="font-semibold mb-4 flex items-center">
                                <AlertTriangle className="h-4 w-4 mr-2" />
                                SLA
                            </h3>
                            <div className="space-y-3">
                                <div>
                                    <span className="text-sm font-medium text-gray-600">First Response Due</span>
                                    <p className="text-sm mt-1">
                                        {new Date(ticketDetail.sla.first_response_due).toLocaleString()}
                                    </p>
                                    {ticketDetail.sla.first_response_at ? (
                                        <p className="text-xs text-green-600 mt-1">
                                            Responded {formatDistanceToNow(new Date(ticketDetail.sla.first_response_at))} ago
                                        </p>
                                    ) : (
                                        <p className="text-xs text-gray-500 mt-1">
                                            {new Date(ticketDetail.sla.first_response_due) > new Date() ? (
                                                <span className="text-green-600">
                                                    {formatDistanceToNow(new Date(ticketDetail.sla.first_response_due))} remaining
                                                </span>
                                            ) : (
                                                <span className="text-red-600">
                                                    Overdue by {formatDistanceToNow(new Date(ticketDetail.sla.first_response_due))}
                                                </span>
                                            )}
                                        </p>
                                    )}
                                </div>

                                <div>
                                    <span className="text-sm font-medium text-gray-600">Resolution Due</span>
                                    <p className="text-sm mt-1">
                                        {new Date(ticketDetail.sla.resolution_due).toLocaleString()}
                                    </p>
                                    {ticketDetail.sla.resolution_at ? (
                                        <p className="text-xs text-green-600 mt-1">
                                            Resolved {formatDistanceToNow(new Date(ticketDetail.sla.resolution_at))} ago
                                        </p>
                                    ) : (
                                        <p className="text-xs text-gray-500 mt-1">
                                            {new Date(ticketDetail.sla.resolution_due) > new Date() ? (
                                                <span className="text-green-600">
                                                    {formatDistanceToNow(new Date(ticketDetail.sla.resolution_due))} remaining
                                                </span>
                                            ) : (
                                                <span className="text-red-600">
                                                    Overdue by {formatDistanceToNow(new Date(ticketDetail.sla.resolution_due))}
                                                </span>
                                            )}
                                        </p>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
