'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, RefreshCw } from 'lucide-react';
import { TicketTable } from '@/components/tickets/TicketTable';
import { TicketFilters } from '@/components/tickets/TicketFilters';
import { useTicketStore } from '@/lib/stores/ticket-store';
import type { TicketFilter, TicketListItem } from '@/lib/types/tickets';

export default function TicketsPage() {
    const router = useRouter();
    const {
        tickets,
        pagination,
        filters,
        loading,
        error,
        fetchTickets,
        setFilters,
        clearFilters,
    } = useTicketStore();

    const [localFilters, setLocalFilters] = useState<TicketFilter>(filters);

    // Debounce filter updates
    useEffect(() => {
        const timer = setTimeout(() => {
            setFilters(localFilters);
        }, 500);

        return () => clearTimeout(timer);
    }, [localFilters, setFilters]);

    // Initial load
    useEffect(() => {
        fetchTickets();
    }, [fetchTickets]);

    const handleRefresh = () => {
        fetchTickets();
    };

    const handleViewTicket = (ticketId: string) => {
        router.push(`/tickets/${ticketId}`);
    };

    const handleEditTicket = (ticketId: string) => {
        router.push(`/tickets/${ticketId}/edit`);
    };

    const handleArchiveTicket = (ticketId: string) => {
        // Archive ticket
        console.log('Archive ticket:', ticketId);
    };

    const handleCreateTicket = () => {
        router.push('/tickets/create');
    };

    const handleResetFilters = () => {
        clearFilters();
        setLocalFilters({});
    };

    const handleLoadMore = () => {
        if (pagination.page < pagination.total_pages) {
            const nextPage = pagination.page + 1;
            const newFilters = {
                ...filters,
                offset: (nextPage - 1) * pagination.limit
            };
            fetchTickets(newFilters);
        }
    };    // Convert tickets to list items for table
    const ticketListItems: TicketListItem[] = tickets.map(ticket => ({
        id: ticket.id,
        ticket_number: ticket.ticket_code,
        subject: ticket.subject,
        description: ticket.description,
        customer_name: ticket.customer_name,
        customer_email: ticket.customer_email,
        priority: ticket.priority,
        status: ticket.status,
        category: ticket.category ? {
            id: ticket.category.id,
            name: ticket.category.name
        } : undefined,
        agent: ticket.assigned_to ? {
            id: ticket.assigned_to.id,
            name: ticket.assigned_to.name,
            email: ticket.assigned_to.email
        } : undefined,
        created_at: ticket.created_at,
        updated_at: ticket.updated_at,
    }));

    return (
        <div className="space-y-6">
            {/* Header */}
            <div className="flex justify-between items-center">
                <div>
                    <h1 className="text-2xl font-bold text-gray-900">Tickets</h1>
                    <p className="text-gray-600">
                        {pagination.total > 0
                            ? `Showing ${pagination.total} tickets`
                            : 'No tickets found'
                        }
                    </p>
                </div>
                <div className="flex gap-3">
                    <button
                        onClick={handleRefresh}
                        disabled={loading}
                        className="bg-white text-gray-700 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors font-medium inline-flex items-center disabled:opacity-50"
                    >
                        <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                        Refresh
                    </button>
                    <button
                        onClick={handleCreateTicket}
                        className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors font-medium inline-flex items-center"
                    >
                        <Plus className="h-4 w-4 mr-2" />
                        New Ticket
                    </button>
                </div>
            </div>

            {/* Error Message */}
            {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div className="flex">
                        <div className="ml-3">
                            <h3 className="text-sm font-medium text-red-800">
                                Error occurred
                            </h3>
                            <div className="mt-2 text-sm text-red-700">
                                <p>{error}</p>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Filters */}
            <TicketFilters
                filters={localFilters}
                onFiltersChange={setLocalFilters}
                onReset={handleResetFilters}
            />

            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                    <div className="flex items-center">
                        <div className="flex-shrink-0">
                            <div className="w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center">
                                <div className="w-4 h-4 bg-white rounded-full"></div>
                            </div>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">Open Tickets</p>
                            <p className="text-2xl font-semibold text-gray-900">
                                {tickets.filter(t => t.status === 'open').length}
                            </p>
                        </div>
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                    <div className="flex items-center">
                        <div className="flex-shrink-0">
                            <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                                <div className="w-4 h-4 bg-white rounded-full"></div>
                            </div>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">In Progress</p>
                            <p className="text-2xl font-semibold text-gray-900">
                                {tickets.filter(t => t.status === 'in_progress').length}
                            </p>
                        </div>
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                    <div className="flex items-center">
                        <div className="flex-shrink-0">
                            <div className="w-8 h-8 bg-purple-500 rounded-lg flex items-center justify-center">
                                <div className="w-4 h-4 bg-white rounded-full"></div>
                            </div>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">Resolved</p>
                            <p className="text-2xl font-semibold text-gray-900">
                                {tickets.filter(t => t.status === 'resolved').length}
                            </p>
                        </div>
                    </div>
                </div>

                <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
                    <div className="flex items-center">
                        <div className="flex-shrink-0">
                            <div className="w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center">
                                <div className="w-4 h-4 bg-white rounded-full"></div>
                            </div>
                        </div>
                        <div className="ml-4">
                            <p className="text-sm font-medium text-gray-600">Escalated</p>
                            <p className="text-2xl font-semibold text-gray-900">
                                {tickets.filter(t => t.status === 'escalated').length}
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Tickets Table */}
            <div className="bg-white rounded-lg shadow-lg border border-gray-200">
                <TicketTable
                    tickets={ticketListItems}
                    isLoading={loading}
                    onViewTicket={handleViewTicket}
                    onEditTicket={handleEditTicket}
                    onArchiveTicket={handleArchiveTicket}
                />

                {/* Pagination */}
                {pagination.total_pages > 1 && (
                    <div className="px-6 py-4 border-t border-gray-200 bg-gray-50">
                        <div className="flex items-center justify-between">
                            <div className="text-sm text-gray-700">
                                Page {pagination.page} of {pagination.total_pages}
                                {' '}({pagination.total} total tickets)
                            </div>
                            <div className="flex gap-2">
                                <button
                                    onClick={() => {
                                        const prevPage = pagination.page - 1;
                                        const newFilters = {
                                            ...filters,
                                            offset: (prevPage - 1) * pagination.limit
                                        };
                                        fetchTickets(newFilters);
                                    }}
                                    disabled={pagination.page <= 1 || loading}
                                    className="bg-white text-gray-700 px-3 py-1 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    Previous
                                </button>
                                <button
                                    onClick={handleLoadMore}
                                    disabled={pagination.page >= pagination.total_pages || loading}
                                    className="bg-white text-gray-700 px-3 py-1 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    Next
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
